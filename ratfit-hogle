def polyfit(a):  #fits a poly to [y_0,y_1,\dots] using lagrange polynomials
	p=0
	for i in range(len(a)):
		denom=1
		term=a[i]
		for j in range(len(a)):
			if j!=i:
				term*=(x-j)  
				term/=(i-j)
		p+=term
	return expand(p)

def beatthis(data,bestyet):
    #print "\tBest yet:",bestyet
    deg=bestyet.numerator().degree(x)+bestyet.denominator().degree(x)
    #print "Degree to beat is",deg,".\n"
    #numerator vars
    nv=["a"+str(i) for i in range(deg)]
    #denominator vars
    dv=["b"+str(i) for i in range(deg)]
    for i in range(1,deg-1):
        f=sum(var(nv[k])*x^k for k in range(0,i+1))
        j=deg-1-i
        g=sum(var(dv[k])*x^k for k in range(0,j+1))
        #print "Trying", f,"/",g,"..."
        equations=[]
        for k in range(len(data)):
            equations.append(f(x=k)==data[k]*g(x=k))  #plugs in points
        solvefor=nv[0:i+1]+dv[0:j+1]
        s=solve(equations,var(solvefor))
        subs=set([s[0][i].rhs() for i in range(len(s[0]))])
        if 0 not in subs or len(subs)>1:
            rational=(f/g).substitute({s[0][i].lhs(): s[0][i].rhs() for i in range(len(s[0]))}).full_simplify()
            return beatthis(data,rational)
    return bestyet
    

def ratfit(a):
    # first the polynomial
    p = polyfit(a)
    return beatthis(a,p)
    
    

points=[1,1/2,1/5,1/10,1/17]    
print ratfit(points),"\n"

points=[0, 3/2, 8/3, 15/4, 24/5, 35/6, 48/7, 63/8, 80/9, 99/10]    
print ratfit(points),"\n"

points=[1.00000000000000, 0.909090909090909, -1.50000000000000, -0.0465116279069767, 0.0169491525423729, 0.0248962655601660, 0.0235849056603774, 0.0206185567010309]
print ratfit(points),"\n"

#random=r=[int(random()*100) for i in range(10)]
#print ratfit(random),"\n"
